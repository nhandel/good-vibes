---
description: This document explicitly lists all approved technologies, libraries, tools, and their versions for the project. The AI requests this file to confirm allowed dependencies and platform specifics before adding libraries or writing environment-specific code.
globs: 
alwaysApply: false
---
<!--
<vibeSpec>
    <purpose>This document explicitly lists all approved technologies, libraries, tools, and their versions for the project. The AI requests this file to confirm allowed dependencies and platform specifics before adding libraries or writing environment-specific code.</purpose>
    <scope>
        *   Programming Languages & Versions: (e.g., Python 3.11+, Node.js 18.x).
        *   Frameworks & Major Libraries: (e.g., React 18.x, FastAPI 0.100+, Pandas 2.x). Specify versions if critical.
        *   Databases & Caching: (e.g., PostgreSQL 15, Redis 7).
        *   APIs (External): List of critical third-party APIs integrated with.
        *   Build Tools, Package Managers, Linters, Formatters: (e.g., Vite, npm, pip, Ruff, Prettier).
        *   Testing Frameworks & Tools: (e.g., Pytest, Jest, Playwright).
        *   Deployment Environment / Cloud Services: Key details (e.g., Docker, Target OS, AWS S3/EC2).
        *   Critical Constraints: Non-functional requirements impacting technology (e.g., "Real-time data processing required").
    </scope>
    <nonScope>
        *   Application architecture or data flow diagrams (`architecture.mdc`).
        *   UI design specifications (`design.mdc`).
        *   Detailed coding standards (specific style guides or `rules.mdc`).
        *   Business logic descriptions.
    </nonScope>
    <usageNotes>Initial draft generated via `prompt-0-context-setup.md`. Requires careful human review and adjustment based on team expertise/project needs. Can be updated via `prompt-5-update-context-doc.md`. AI Agents should request this document to confirm allowed libraries, versions, or tools before adding dependencies or writing platform-specific code.</usageNotes>
</vibeSpec>
-->

# Project Tech Stack: [Your Project Name]

## 1. Core Languages & Runtimes

<!-- List the primary programming languages and their runtime environments. -->
**Instructions:** Specify the main languages and their versions.

*   **Language:** [e.g., Python] Version: [e.g., 3.11+]
*   **Language:** [e.g., JavaScript (for Frontend)] Version: [e.g., ES2022]
*   **Runtime:** [e.g., Node.js] Version: [e.g., 18.x LTS]
*   <!-- Add others if necessary -->

## 2. Frameworks

<!-- List the major frameworks used for backend, frontend, etc. -->
**Instructions:** Detail the primary frameworks.

*   **Backend Framework:** [e.g., Django 4.2 / FastAPI 0.100]
*   **Frontend Framework:** [e.g., React 18 / Vue 3 / SvelteKit]
*   **CSS Framework/Library:** [e.g., Tailwind CSS 3 / Bootstrap 5 / None]
*   <!-- Add others if necessary -->

## 3. Core Libraries & Packages

<!-- List essential libraries that define significant parts of the architecture or provide critical functionality. -->
**Instructions:** Enumerate key third-party libraries.

*   **Data Handling:** [e.g., Pandas (Python), Zod (TypeScript)]
*   **API Client:** [e.g., Axios (JS), Requests (Python)]
*   **State Management (Frontend):** [e.g., Redux Toolkit, Zustand, Pinia]
*   **ORM/Database Client:** [e.g., SQLAlchemy (Python), Prisma (TypeScript), pg (Node.js)]
*   **Testing:** [e.g., Pytest (Python), Jest (JS), Vitest (JS)]
*   <!-- Add other critical libraries -->

## 4. Databases

<!-- Specify the database(s) used. -->
**Instructions:** Define the database systems.

*   **Primary Database:** [e.g., PostgreSQL 15]
*   **Caching:** [e.g., Redis 7]
*   <!-- Add others if necessary (e.g., Vector DB, Time Series DB) -->

## 5. APIs & External Services

<!-- List crucial external APIs or managed services the project relies on. -->
**Instructions:** Detail external dependencies.

*   **Authentication:** [e.g., Auth0 / Firebase Authentication / Custom JWT]
*   **Payment Processing:** [e.g., Stripe API]
*   **Cloud Provider Services:** [e.g., AWS S3 for storage, GCP Cloud Functions for serverless]
*   <!-- Add other essential services -->

## 6. Development & Operations Tools

<!-- List tools used for development, building, deployment, and monitoring. -->
**Instructions:** Specify tooling for the development lifecycle.

*   **Package Manager:** [e.g., pip + venv/Poetry (Python), npm/yarn/pnpm (JS)]
*   **Version Control:** Git
*   **Containerization:** [e.g., Docker]
*   **CI/CD:** [e.g., GitHub Actions, GitLab CI]
*   **Linting/Formatting:** [e.g., Black/Flake8/Ruff (Python), ESLint/Prettier (JS)]
*   **Monitoring/Logging:** [e.g., Sentry, Datadog]
*   <!-- Add other relevant tools -->

## 7. Critical Functionalities & Constraints

<!-- Note any specific algorithms, protocols, performance constraints, or security requirements dictated by the tech stack choices. -->
**Instructions:** Highlight any special requirements or limitations imposed by the stack.

*   **Security:** All API endpoints must [e.g., require authentication via JWT].
*   **Performance:** Real-time updates required for [Feature Y], implemented using [e.g., WebSockets].
*   **Constraint:** Must use [Library Z] for [Specific Task] due to [Reason].
*   <!-- Add other critical notes --> 